/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface Ex1Contract extends Truffle.Contract<Ex1Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Ex1Instance>;
}

type AllEvents = never;

export interface Ex1Instance extends Truffle.ContractInstance {
  setState: {
    (_state: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_state: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _state: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _state: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getBalance(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getBalanceForAddress(
    _addr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  sendEth: {
    (_destination: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _destination: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _destination: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _destination: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    setState: {
      (_state: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _state: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _state: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _state: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getBalance(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getBalanceForAddress(
      _addr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    sendEth: {
      (_destination: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _destination: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _destination: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _destination: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
