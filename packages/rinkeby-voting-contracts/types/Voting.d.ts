/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface VotingContract extends Truffle.Contract<VotingInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<VotingInstance>;
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface ProposalRegistered {
  name: "ProposalRegistered";
  args: {
    proposalId: BN;
    0: BN;
  };
}

export interface Voted {
  name: "Voted";
  args: {
    voter: string;
    proposalId: BN;
    0: string;
    1: BN;
  };
}

export interface VoterRegistered {
  name: "VoterRegistered";
  args: {
    voterAddress: string;
    0: string;
  };
}

export interface WorkflowStatusChange {
  name: "WorkflowStatusChange";
  args: {
    previousStatus: BN;
    newStatus: BN;
    0: BN;
    1: BN;
  };
}

type AllEvents =
  | OwnershipTransferred
  | ProposalRegistered
  | Voted
  | VoterRegistered
  | WorkflowStatusChange;

export interface VotingInstance extends Truffle.ContractInstance {
  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  proposals(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: BN; 2: string }>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  result(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  status(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * voters can be added only by contract owner when `status` is set to RegisteringVoters An event VoterRegistered is emitted
   * Administrator can register voters.
   * @param _voter The address to add into voters registry
   */
  registerVoter: {
    (_voter: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_voter: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _voter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _voter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Can be called only when `status` is set to RegisteringVoters. Two default proposals are registered at the beginning of this step: `Abstention` and `Blank`. That means a registered voter that forget to vote will be counted as `abstention` thanks to `proposals` array index 0 An event WorkflowStatusChange is emitted
   * Administrator can close voters registration and open proposals registration.
   */
  startProposalsRegistration: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Can be called only when `status` is set to ProposalsRegistrationStarted. An event WorkflowStatusChange is emitted
   * Administrator can close proposals registration.
   */
  stopProposalsRegistration: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Can be called only when `status` is set to ProposalsRegistrationEnded. An event WorkflowStatusChange is emitted
   * Administrator can open voting session.
   */
  startVotingSession: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Can be called only when `status` is set to VotingSessionStarted. An event WorkflowStatusChange is emitted
   * Administrator can close voting session.
   */
  stopVotingSession: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * After votes talling, it is possible that we got many winning proposals. Votes talling can be triggered only by contract owner when `status` is set to VotingSessionEnded An event WorkflowStatusChange is emitted
   * Administrator triggers votes talling.
   */
  tallyVotes: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Each voter can register many proposals. As the vote is considered to be done in small organization context, the maximum number of proposals is limited to 256. Maximum number of proposals per voter is also limited to 3. Votes can be added only by registered voter when `status` is set to VotingSessionStarted
   * Administrator or voter can register a new proposal.
   * @param _description The proposal description
   */
  registerProposal: {
    (_description: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Each voter can vote only once for one proposal. Votes can be added only by registered voter when `status` is set to VotingSessionStarted
   * A voter can register his vote for a proposal.
   * @param _proposalId The identifier of the chosen proposal
   */
  vote: {
    (
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Administrator and registered voters can all access to everybody votes.
   * Retreive voter information
   */
  getVoter(
    voter: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    isRegistered: boolean;
    hasVoted: boolean;
    votedProposalId: BN;
    nbProposals: BN;
  }>;

  methods: {
    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    proposals(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: BN; 2: string }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    result(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    status(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * voters can be added only by contract owner when `status` is set to RegisteringVoters An event VoterRegistered is emitted
     * Administrator can register voters.
     * @param _voter The address to add into voters registry
     */
    registerVoter: {
      (_voter: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _voter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _voter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _voter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Can be called only when `status` is set to RegisteringVoters. Two default proposals are registered at the beginning of this step: `Abstention` and `Blank`. That means a registered voter that forget to vote will be counted as `abstention` thanks to `proposals` array index 0 An event WorkflowStatusChange is emitted
     * Administrator can close voters registration and open proposals registration.
     */
    startProposalsRegistration: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Can be called only when `status` is set to ProposalsRegistrationStarted. An event WorkflowStatusChange is emitted
     * Administrator can close proposals registration.
     */
    stopProposalsRegistration: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Can be called only when `status` is set to ProposalsRegistrationEnded. An event WorkflowStatusChange is emitted
     * Administrator can open voting session.
     */
    startVotingSession: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Can be called only when `status` is set to VotingSessionStarted. An event WorkflowStatusChange is emitted
     * Administrator can close voting session.
     */
    stopVotingSession: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * After votes talling, it is possible that we got many winning proposals. Votes talling can be triggered only by contract owner when `status` is set to VotingSessionEnded An event WorkflowStatusChange is emitted
     * Administrator triggers votes talling.
     */
    tallyVotes: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Each voter can register many proposals. As the vote is considered to be done in small organization context, the maximum number of proposals is limited to 256. Maximum number of proposals per voter is also limited to 3. Votes can be added only by registered voter when `status` is set to VotingSessionStarted
     * Administrator or voter can register a new proposal.
     * @param _description The proposal description
     */
    registerProposal: {
      (_description: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _description: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _description: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _description: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Each voter can vote only once for one proposal. Votes can be added only by registered voter when `status` is set to VotingSessionStarted
     * A voter can register his vote for a proposal.
     * @param _proposalId The identifier of the chosen proposal
     */
    vote: {
      (
        _proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Administrator and registered voters can all access to everybody votes.
     * Retreive voter information
     */
    getVoter(
      voter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      isRegistered: boolean;
      hasVoted: boolean;
      votedProposalId: BN;
      nbProposals: BN;
    }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
