/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type ProposalRegistered = ContractEventLog<{
  proposalId: string;
  0: string;
}>;
export type Voted = ContractEventLog<{
  voter: string;
  proposalId: string;
  0: string;
  1: string;
}>;
export type VoterRegistered = ContractEventLog<{
  voterAddress: string;
  0: string;
}>;
export type WorkflowStatusChange = ContractEventLog<{
  previousStatus: string;
  newStatus: string;
  0: string;
  1: string;
}>;

export interface VotingAlyra extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): VotingAlyra;
  clone(): VotingAlyra;
  methods: {
    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    winningProposalID(): NonPayableTransactionObject<string>;

    workflowStatus(): NonPayableTransactionObject<string>;

    getVoter(
      _addr: string
    ): NonPayableTransactionObject<[boolean, boolean, string]>;

    getOneProposal(
      _id: number | string | BN
    ): NonPayableTransactionObject<[string, string]>;

    addVoter(_addr: string): NonPayableTransactionObject<void>;

    addProposal(_desc: string): NonPayableTransactionObject<void>;

    setVote(_id: number | string | BN): NonPayableTransactionObject<void>;

    startProposalsRegistering(): NonPayableTransactionObject<void>;

    endProposalsRegistering(): NonPayableTransactionObject<void>;

    startVotingSession(): NonPayableTransactionObject<void>;

    endVotingSession(): NonPayableTransactionObject<void>;

    tallyVotes(): NonPayableTransactionObject<void>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    ProposalRegistered(cb?: Callback<ProposalRegistered>): EventEmitter;
    ProposalRegistered(
      options?: EventOptions,
      cb?: Callback<ProposalRegistered>
    ): EventEmitter;

    Voted(cb?: Callback<Voted>): EventEmitter;
    Voted(options?: EventOptions, cb?: Callback<Voted>): EventEmitter;

    VoterRegistered(cb?: Callback<VoterRegistered>): EventEmitter;
    VoterRegistered(
      options?: EventOptions,
      cb?: Callback<VoterRegistered>
    ): EventEmitter;

    WorkflowStatusChange(cb?: Callback<WorkflowStatusChange>): EventEmitter;
    WorkflowStatusChange(
      options?: EventOptions,
      cb?: Callback<WorkflowStatusChange>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "ProposalRegistered", cb: Callback<ProposalRegistered>): void;
  once(
    event: "ProposalRegistered",
    options: EventOptions,
    cb: Callback<ProposalRegistered>
  ): void;

  once(event: "Voted", cb: Callback<Voted>): void;
  once(event: "Voted", options: EventOptions, cb: Callback<Voted>): void;

  once(event: "VoterRegistered", cb: Callback<VoterRegistered>): void;
  once(
    event: "VoterRegistered",
    options: EventOptions,
    cb: Callback<VoterRegistered>
  ): void;

  once(event: "WorkflowStatusChange", cb: Callback<WorkflowStatusChange>): void;
  once(
    event: "WorkflowStatusChange",
    options: EventOptions,
    cb: Callback<WorkflowStatusChange>
  ): void;
}
