/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type ProposalRegistered = ContractEventLog<{
  sessionId: string;
  proposalId: string;
  proposer: string;
  description: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type SessionCreated = ContractEventLog<{
  sessionId: string;
  name: string;
  description: string;
  0: string;
  1: string;
  2: string;
}>;
export type Voted = ContractEventLog<{
  sessionId: string;
  voter: string;
  proposalId: string;
  0: string;
  1: string;
  2: string;
}>;
export type VoterRegistered = ContractEventLog<{
  sessionId: string;
  voterAddress: string;
  0: string;
  1: string;
}>;
export type VotesTallied = ContractEventLog<{
  sessionId: string;
  votersCount: string;
  totalVotes: string;
  blankVotes: string;
  abstention: string;
  winningProposals: [string, string, string][];
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: [string, string, string][];
}>;
export type WorkflowStatusChange = ContractEventLog<{
  sessionId: string;
  previousStatus: string;
  newStatus: string;
  0: string;
  1: string;
  2: string;
}>;

export interface Voting extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Voting;
  clone(): Voting;
  methods: {
    createVotingSession(
      _name: string,
      _description: string
    ): NonPayableTransactionObject<void>;

    getVote(
      _sessionId: number | string | BN,
      _voter: string
    ): NonPayableTransactionObject<string>;

    getWinners(
      _sessionId: number | string | BN
    ): NonPayableTransactionObject<[string, string, string][]>;

    owner(): NonPayableTransactionObject<string>;

    registerProposal(
      _sessionId: number | string | BN,
      _description: string
    ): NonPayableTransactionObject<void>;

    registerVoter(
      _sessionId: number | string | BN,
      _voter: string
    ): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    startProposalsRegistration(
      _sessionId: number | string | BN
    ): NonPayableTransactionObject<void>;

    startVotingSession(
      _sessionId: number | string | BN
    ): NonPayableTransactionObject<void>;

    stopProposalsRegistration(
      _sessionId: number | string | BN
    ): NonPayableTransactionObject<void>;

    stopVotingSession(
      _sessionId: number | string | BN
    ): NonPayableTransactionObject<void>;

    tallyVotes(
      _sessionId: number | string | BN
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    vote(
      _sessionId: number | string | BN,
      _proposalId: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    ProposalRegistered(cb?: Callback<ProposalRegistered>): EventEmitter;
    ProposalRegistered(
      options?: EventOptions,
      cb?: Callback<ProposalRegistered>
    ): EventEmitter;

    SessionCreated(cb?: Callback<SessionCreated>): EventEmitter;
    SessionCreated(
      options?: EventOptions,
      cb?: Callback<SessionCreated>
    ): EventEmitter;

    Voted(cb?: Callback<Voted>): EventEmitter;
    Voted(options?: EventOptions, cb?: Callback<Voted>): EventEmitter;

    VoterRegistered(cb?: Callback<VoterRegistered>): EventEmitter;
    VoterRegistered(
      options?: EventOptions,
      cb?: Callback<VoterRegistered>
    ): EventEmitter;

    VotesTallied(cb?: Callback<VotesTallied>): EventEmitter;
    VotesTallied(
      options?: EventOptions,
      cb?: Callback<VotesTallied>
    ): EventEmitter;

    WorkflowStatusChange(cb?: Callback<WorkflowStatusChange>): EventEmitter;
    WorkflowStatusChange(
      options?: EventOptions,
      cb?: Callback<WorkflowStatusChange>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "ProposalRegistered", cb: Callback<ProposalRegistered>): void;
  once(
    event: "ProposalRegistered",
    options: EventOptions,
    cb: Callback<ProposalRegistered>
  ): void;

  once(event: "SessionCreated", cb: Callback<SessionCreated>): void;
  once(
    event: "SessionCreated",
    options: EventOptions,
    cb: Callback<SessionCreated>
  ): void;

  once(event: "Voted", cb: Callback<Voted>): void;
  once(event: "Voted", options: EventOptions, cb: Callback<Voted>): void;

  once(event: "VoterRegistered", cb: Callback<VoterRegistered>): void;
  once(
    event: "VoterRegistered",
    options: EventOptions,
    cb: Callback<VoterRegistered>
  ): void;

  once(event: "VotesTallied", cb: Callback<VotesTallied>): void;
  once(
    event: "VotesTallied",
    options: EventOptions,
    cb: Callback<VotesTallied>
  ): void;

  once(event: "WorkflowStatusChange", cb: Callback<WorkflowStatusChange>): void;
  once(
    event: "WorkflowStatusChange",
    options: EventOptions,
    cb: Callback<WorkflowStatusChange>
  ): void;
}
