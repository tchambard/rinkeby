{
  "language": "Solidity",
  "sources": {
    "contracts/corrections/Deployed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\ninterface Deployed{\n    function set (uint num) external;\n    function get() external view returns (uint);\n}\n\ncontract Existing {\n\n    Deployed dc;\n\n    function call(address _addr) public {\n        dc = Deployed(_addr);\n    }\n\n    function getA () public view returns (uint result){\n        return dc.get();\n    }\n\n    function setA(uint _val) public{\n        dc.set(_val);\n    }\n\n}"
    },
    "contracts/corrections/Lycee.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\ncontract Notes is Ownable{\n\n    struct Student {\n        string name;\n        string class;\n        address addr;\n        uint noteBiology;\n        uint noteMaths;\n        uint noteFr;\n    }\n\n    Student[] private students;\n\n    // class => course => addre\n    mapping (string => mapping (string => address)) teachers;\n\n    event studentAdded(string _name, string _class, address _addr);\n    event teacherAdded(string _class, string _course, address _addr);\n\n    function addStudent(string memory _name, string memory _class, address _addr) public onlyOwner {\n        students.push(Student(_name, _class, _addr, 0,0,0));\n        emit studentAdded( _name, _class, _addr);\n    }\n\n    function setTeacher(string memory _class, string memory _course, address  _addr) public onlyOwner{\n        teachers[_class][_course]=_addr;\n        emit teacherAdded( _class, _course,  _addr);\n    }\n\n    function getStudentFromName(string memory _name) private view returns (uint){\n        for(uint i=0;i<students.length;i++){\n            if(keccak256(abi.encodePacked(students[i].name))==keccak256(abi.encodePacked(_name))){\n                return i;\n            }\n        } \n        return 0;\n    }\n\n    function stringsEquals(string memory _string1, string memory _string2) pure private returns (bool){\n        bool test;\n        if ( keccak256( abi.encodePacked(_string1) ) == keccak256( abi.encodePacked(_string2) ) ){\n            test=true;\n        }\n        return test;\n    }\n\n    function setNote(string memory _course, string memory _nameStudent, uint _note) public {\n        uint idStudent=getStudentFromName(_nameStudent);\n        require(msg.sender==teachers[students[idStudent].class][_course], 'you re not the teacher of this student course');\n        if (stringsEquals(_course,'biology')){\n            students[idStudent].noteBiology=_note;\n        }\n        else if (stringsEquals(_course,'maths')){\n            students[idStudent].noteMaths=_note;\n        }\n        else if (stringsEquals(_course,'french')){\n            students[idStudent].noteFr=_note;\n        }\n        else {revert('type a real course');}\n    }\n\n    function calculateMoyennePerCourse(string memory _class, string memory _course) public view returns (uint){\n        require(msg.sender==teachers[_class][_course], \"you're not the teacher of this class course\");\n        uint totalNote;\n        uint totalStudent;\n        for (uint i=0; i<students.length;i++){\n            if (stringsEquals(_class,students[i].class)){\n                if (stringsEquals(_course,'biology')){\n                    totalNote+=students[i].noteBiology;\n                    totalStudent+=1;\n                }\n                if (stringsEquals(_course,'maths')){\n                    totalNote+=students[i].noteMaths;\n                    totalStudent+=1;\n                }\n                if (stringsEquals(_course,'french')){\n                    totalNote+=students[i].noteFr;\n                    totalStudent+=1;\n                }\n            }\n        }\n        uint moyenne=totalNote*100/totalStudent;\n        return moyenne;\n    }\n\n    function calculateMoyenneStudent(string memory _name) public onlyOwner view returns (uint){\n        uint idStudent=getStudentFromName(_name);\n        return (students[idStudent].noteBiology+students[idStudent].noteMaths+students[idStudent].noteFr)/3;\n    }\n\n    function isPassing(string memory _name) public onlyOwner view returns (bool){\n        if(calculateMoyenneStudent(_name)>=10){\n            return true;\n        } else {return false;}\n    }\n\n    function calculateMoyenneGenerale(string memory _class) public view onlyOwner returns (uint) {\n        uint totalNote;\n        uint totalStudent;\n        for (uint i=0; i<students.length;i++){\n            if (stringsEquals(_class,students[i].class)){\n                totalNote+=students[i].noteBiology+students[i].noteMaths+students[i].noteFr;\n                totalStudent+=3;\n            }\n        }\n        return totalNote/totalStudent;\n    }\n\n\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/exercices/AlyraERC20Token.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n \nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n \ncontract AlyraERC20Token is ERC20 {\n    constructor(uint256 initialSupply) ERC20('Alyra', 'ALY') {\n       _mint(msg.sender, initialSupply);\n    }\n}\n"
    },
    "contracts/exercices/Crowdsale.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n \nimport './AlyraERC20Token.sol';\n \ncontract Crowdsale {\n   uint public rate = 200; // le taux à utiliser\n   AlyraERC20Token public token; // L’instance ERC20Token à déployer \n \n   constructor(uint256 initialSupply) {\n       token = new AlyraERC20Token(initialSupply);\n   }\n\n    receive() external payable {\n       require(msg.value >= 0.1 ether, \"you can't send less than 0.1 ether\");\n       distribute(msg.value);\n   }\n\n    function distribute(uint256 amount) internal {\n       uint256 tokensToSent = amount * rate;\n       token.transfer(msg.sender, tokensToSent);\n    }\n}\n"
    },
    "contracts/exercices/Saving.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\ncontract Saving is Ownable {\n    \n    uint firstDepositDate;\n\n    mapping(uint => uint) private history;\n\n    uint private depositsCount;\n\n    event Deposit(address sender, uint amount);\n\n    event Withdraw(uint amount);\n\n    // modifier isAdmin() {\n    //     require(msg.sender == admin, 'Forbidden');\n    //     _;\n    // }\n\n    receive() external payable {\n        history[depositsCount] = msg.value;\n        depositsCount++;\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw() external payable onlyOwner {\n        require(firstDepositDate != 0, 'withdraw forbidden before first deposit');\n\n        uint nbDaysSinceFirstDeposit = (firstDepositDate - block.timestamp) / 60 / 60 / 24;\n        require(nbDaysSinceFirstDeposit > 90, 'withdraw forbidden before 90 days after first deposit');\n\n        (bool sent,) = msg.sender.call{value:address(this).balance}('');\n        require(sent, 'withdraw failed');\n\n        emit Withdraw(msg.value);\n    }\n\n    function getDeposit(uint index) external view onlyOwner returns (uint) {\n        return history[index];\n    }\n}"
    },
    "contracts/exercices/Notes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\ncontract Notes is Ownable {\n\n    enum Subject {\n        Math,\n        Fr,\n        Bio\n    }\n\n    struct Student {\n        mapping(Subject => uint8[]) notes;\n        bool exists;\n    }\n\n    mapping(Subject => address) teachers;\n\n    mapping(string => Student) students;\n\n    string[] studentNames;\n\n    modifier onlyTeacher {\n        require(msg.sender == teachers[Subject.Bio] || msg.sender == teachers[Subject.Math] || msg.sender == teachers[Subject.Fr], 'only teachers granted');\n        _;\n    }\n\n    function registerTeacher(Subject _subject) external {\n        require(teachers[_subject] == address(0), 'Teacher already registered');\n        teachers[_subject] = msg.sender;\n    }\n\n    function addNote(string calldata _studentName, uint8 _note) external onlyTeacher {\n        registerStudentIfNotExist(_studentName);\n\n        Student storage student = students[_studentName];\n        if (msg.sender == teachers[Subject.Bio]) {\n            student.notes[Subject.Bio].push(_note);\n        } else if (msg.sender == teachers[Subject.Math]) {\n            student.notes[Subject.Math].push(_note);\n        } else if (msg.sender == teachers[Subject.Fr]) {\n            student.notes[Subject.Fr].push(_note);\n        }\n    }\n\n    function setNote(string calldata _studentName, uint8 _note, uint8 _noteIndex) external onlyTeacher {\n        registerStudentIfNotExist(_studentName);\n\n        Student storage student = students[_studentName];\n        if (msg.sender == teachers[Subject.Bio]) {\n            student.notes[Subject.Bio][_noteIndex] = _note;\n        } else if (msg.sender == teachers[Subject.Math]) {\n            student.notes[Subject.Math][_noteIndex] = _note;\n        } else if (msg.sender == teachers[Subject.Fr]) {\n            student.notes[Subject.Fr][_noteIndex] = _note;\n        }\n    }\n\n    function getNote(string calldata _studentName, Subject _subject, uint8 _noteIndex) external view returns (uint8) {\n        return students[_studentName].notes[_subject][_noteIndex];\n    }\n\n    function getStudentSubjectAverage(string calldata _studentName, Subject _subject) public view returns (uint8) {\n        Student storage student = students[_studentName];\n        uint8 sum;\n        for (uint8 i = 0; i < student.notes[_subject].length; i++) {\n            sum += student.notes[_subject][i];\n        }\n        return sum / uint8(student.notes[_subject].length);\n    }\n\n    function getStudentAverage(string calldata _studentName) public view returns (uint8) {\n        uint8 sum;\n        uint8 notesCount;\n\n        Student storage student = students[_studentName];\n\n        for (uint8 i = 0; i < student.notes[Subject.Fr].length; i++) {\n            sum += student.notes[Subject.Fr][i];\n            notesCount++;\n        }\n        for (uint8 i = 0; i < student.notes[Subject.Math].length; i++) {\n            sum += student.notes[Subject.Math][i];\n            notesCount++;\n        }\n        for (uint8 i = 0; i < student.notes[Subject.Bio].length; i++) {\n            sum += student.notes[Subject.Bio][i];\n            notesCount++;\n        }\n        return sum / uint8(notesCount);\n    }\n\n    function getGlobalSubjectAverage(Subject _subject) public view returns (uint8) {\n        uint8 sum;\n        uint8 notesCount;\n\n        for (uint8 i = 0; i < studentNames.length; i++) {\n            Student storage student = students[studentNames[i]];\n            for (uint8 j = 0; j < student.notes[_subject].length; j++) {\n                sum += student.notes[_subject][j];\n                notesCount++;\n            }\n        }\n        return sum / uint8(notesCount);\n    }\n\n    function getGlobalAverage() public view returns (uint8) {\n        uint8 sum;\n        uint8 notesCount;\n\n        for (uint8 i = 0; i < studentNames.length; i++) {\n            Student storage student = students[studentNames[i]];\n            for (uint8 j = 0; j < student.notes[Subject.Fr].length; j++) {\n                sum += student.notes[Subject.Fr][j];\n                notesCount++;\n            }\n            for (uint8 j = 0; j < student.notes[Subject.Math].length; j++) {\n                sum += student.notes[Subject.Math][j];\n                notesCount++;\n            }\n            for (uint8 j = 0; j < student.notes[Subject.Bio].length; j++) {\n                sum += student.notes[Subject.Bio][j];\n                notesCount++;\n            }\n        }\n        return sum / uint8(notesCount);\n    }\n\n    function registerStudentIfNotExist(string calldata _studentName) private {\n        if (!students[_studentName].exists) {\n            studentNames.push(_studentName);\n            students[_studentName].exists = true;\n        }\n    }\n\n}"
    },
    "contracts/exercices/GuessAndWin.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\ncontract GuessAndWin is Ownable {\n\n    struct Player {\n        bool isRegistered;\n        uint8 tries;\n        string proposedWord;\n    }\n\n    address admin;\n\n    mapping(uint => mapping(address => Player)) private games;\n    uint private currentGame;\n\n    string private word;\n    string private indice;\n    \n    event PlayerWon(address _player, string _word);\n    event GameRestarted(address _admin);\n\n    constructor() {\n        admin = msg.sender;\n    }\n    \n    modifier onlyPlayer() {\n        require(games[currentGame][msg.sender].isRegistered, 'Caller is not registered player');\n        _;\n    }\n\n    function newPlayer() external {\n        require(games[currentGame][msg.sender].isRegistered == false, 'Player already registered');\n        games[currentGame][msg.sender] = Player(true, 0, '');\n    }\n\n    function defineWordAndIndice(string memory _word, string memory _indice) external onlyOwner {\n        word = _word;\n        indice = _indice;\n    }\n\n    function getIndice() external view onlyPlayer returns (string memory) {\n        return indice;\n    }\n\n    function proposeWord(string memory _word) external onlyPlayer returns (bool) {\n        require(games[currentGame][msg.sender].tries < 3, 'Player already tried 3 times');\n        games[currentGame][msg.sender].tries++;\n        games[currentGame][msg.sender].proposedWord = _word;\n        bool correct = keccak256(abi.encodePacked(_word)) == keccak256(abi.encodePacked(word));\n        if (correct) {\n            emit PlayerWon(msg.sender, word);\n        }\n        return correct;\n    }\n\n    function newGame(address _newAdmin) external onlyOwner {\n        admin = _newAdmin;\n        currentGame++;\n        emit GameRestarted(_newAdmin);\n    }\n\n}"
    },
    "contracts/exercices/Admin.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\n \ncontract ERC20Token is Ownable {\n\n    mapping(address=> bool) private _whitelist;\n    mapping(address=> bool) private _blacklist;\n    event Whitelisted(address _address);\n    event Blacklisted(address _address);\n\n    function whitelist(address _address) public onlyOwner {\n        require(!_blacklist[_address], 'already blacklisted');\n        require(!_whitelist[_address], 'already whitelisted');\n        _whitelist[_address] = true;\n        emit Whitelisted(_address);\n    }\n\n    function blacklist(address _address) public onlyOwner {\n        require(!_blacklist[_address], 'already blacklisted');\n        require(!_whitelist[_address], 'already whitelisted');\n        _blacklist[_address] = true;\n        emit Blacklisted(_address);\n    }\n\n    function isWhitelisted(address _address) public view returns(bool) {\n        return _whitelist[_address];\n    }\n\n    function isBlacklisted(address _address) public view returns(bool) {\n        return _blacklist[_address];\n    }\n}\n"
    },
    "contracts/exercices/Bank.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n \ncontract Bank {\n   mapping(address => uint) _balances;\n\n   function deposit(uint _amout) public {\n       _balances[msg.sender] += _amout;\n   }\n\n   function transer(address _recipient, uint _amout) public {\n        require(_recipient != address(0), 'You cannot transfer to the address zero');\n        require(_balances[msg.sender] >= _amout, 'balance is too low');\n        _balances[msg.sender] -= _amout;\n        _balances[_recipient] += _amout;\n   }\n\n   function balanceOf(address _address) public view returns (uint){\n       return _balances[_address];\n   }\n}\n"
    },
    "contracts/exercices/Exercice1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ncontract Ex1 {\n    address state;\n\n    function setState(address _state) public {\n        require(_state != address(0), \"Can't set address 0\");\n\n        state = _state;\n    }\n\n    function getBalance() public view returns(uint) {\n        return state.balance;\n    }\n\n    function getBalanceForAddress(address _addr) public view returns(uint) {\n        return _addr.balance;\n    }\n\n    function sendEth (address _destination) payable  public {\n        (bool sent,) = payable(_destination).call{value:msg.value}('');\n        require(sent, unicode'eth non transférés');\n    }\n}"
    },
    "contracts/exercices/Inheritage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\ncontract Parent {\n    uint value;\n\n    function setValue(uint _value) external {\n        value = _value;\n    }\n\n}\n\ncontract Child is Parent {\n    function getValue() external view returns (uint) {\n        return value;\n    }\n}\n\ncontract Caller {\n\n    Child public child = new Child();\n \n    function getChildValue() external returns (uint) {\n        child.setValue(10);\n        return child.getValue();\n    }\n}"
    },
    "contracts/exercices/People.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\ncontract People {\n\n    struct Person {\n        string name;\n        uint age;\n    }\n\n    Person public moi;\n    Person[] public persons;\n\n    function modifyPerson(string memory _name, uint _age) public {\n        moi.name = _name;\n        moi.age = _age;\n    }\n\n    function add(string memory _name, uint _age) public {\n        Person memory person = Person(_name, _age);\n        persons.push(person);\n    }\n\n    function remove() public {\n        persons.pop();\n    }\n\n}"
    },
    "contracts/exercices/Random.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\ncontract Random {\n   uint private nonce = 0;\n\n   function random() public returns(uint) {\n       nonce++;\n       return  uint(keccak256(abi.encodePacked(block.timestamp, msg.sender, nonce))) % 100;\n   }\n}\n"
    },
    "contracts/exercices/SPA.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n \ncontract SPA {\n\n    struct Animal {\n        string race;\n        uint taille;\n        uint age;\n        bool isAdopted;\n    }\n\n    Animal[] public animals;\n\n    mapping(address => uint) public masters;\n\n    event NewAnimalAvailable(uint id, string race, uint taille, uint age);\n\n    event AnimalDied(uint id);\n\n    event AnimalAdopted(uint id);\n\n    function addAnimal(string calldata _race, uint _taille, uint _age) external {\n        animals.push(Animal(_race, _taille, _age, false));\n        emit NewAnimalAvailable(animals.length - 1, _race, _taille, _age);\n    }\n\n    function removeAnimal(uint animalId) external {\n        delete animals[animalId];\n        emit AnimalDied(animalId);\n    }\n\n    function getAnimal(uint id) external view returns (Animal memory) {\n        return animals[id];\n    }\n\n    function setAnimal(uint id, string calldata _race, uint _taille, uint _age) external {\n        animals[id].race = _race;\n        animals[id].taille = _taille;\n        animals[id].age = _age;\n    }\n\n    function adoptByCriteria(string calldata _race, uint _taille, uint _age) external {\n        \n        for (uint i = 0; i < animals.length; i++) {\n            if (animals[i].isAdopted == false && keccak256(abi.encodePacked(animals[i].race)) == keccak256(abi.encodePacked(_race)) && animals[i].taille < _taille && animals[i].age < _age) {\n                masters[msg.sender] = i;\n                emit AnimalAdopted(i);\n                break;\n            }\n        }\n        revert('No animal matches with your criterias');\n    }\n\n    function adoptById(uint id) external {\n        require(animals[id].isAdopted == false, 'Animal already adopted');\n        masters[msg.sender] = id;\n        emit AnimalAdopted(id);\n    }\n\n    function adoptedBy(address master) external view returns (Animal memory) {\n        return animals[masters[master]];\n    }\n\n\n}\n"
    },
    "contracts/exercices/SimpleStoragePayable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0 \n\npragma solidity 0.8.17; \n\ncontract SimpleStoragePayable { \n    uint value;\n\n    constructor() payable {\n\n    }\n    \n    function get() external view returns(uint) {\n        return value;\n    }\n    \n    function set(uint n) external {\n        value = n;\n    }\n    \n} "
    },
    "contracts/exercices/Time.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n \ncontract Time {\n    \n    function getTime() public view returns (uint) {\n        return block.timestamp;\n    }\n}\n"
    },
    "contracts/exercices/Whitelist.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n \ncontract Whitelist {\n    mapping(address=> bool) whitelist;\n    event Authorized(address _address);\n\n    function authorize(address _address) public check {\n        whitelist[_address] = true;\n        emit Authorized(_address);\n    }\n\n    modifier check() {\n        require(whitelist[msg.sender] == true, 'not authorized');\n        _;\n    }\n}\n"
    },
    "contracts/samples/Contacts.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\ncontract Contacts {\n  uint _count = 0; // state variable\n  \n  struct Contact {\n    uint id;\n    string name;\n    string phone;\n  }\n\n  event ContactAdded(uint id);\n\n  mapping(uint => Contact) public contacts;\n  \n  function count() public view returns (uint) {\n    return _count;\n  }\n\n  function createContact(string memory _name, string memory _phone) public {\n    _count++;\n    contacts[_count] = Contact(_count, _name, _phone);\n    emit ContactAdded(_count);\n  }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
