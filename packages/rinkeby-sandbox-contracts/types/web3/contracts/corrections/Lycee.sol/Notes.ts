/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type studentAdded = ContractEventLog<{
  _name: string;
  _class: string;
  _addr: string;
  0: string;
  1: string;
  2: string;
}>;
export type teacherAdded = ContractEventLog<{
  _class: string;
  _course: string;
  _addr: string;
  0: string;
  1: string;
  2: string;
}>;

export interface Notes extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Notes;
  clone(): Notes;
  methods: {
    addStudent(
      _name: string,
      _class: string,
      _addr: string
    ): NonPayableTransactionObject<void>;

    calculateMoyenneGenerale(
      _class: string
    ): NonPayableTransactionObject<string>;

    calculateMoyennePerCourse(
      _class: string,
      _course: string
    ): NonPayableTransactionObject<string>;

    calculateMoyenneStudent(_name: string): NonPayableTransactionObject<string>;

    isPassing(_name: string): NonPayableTransactionObject<boolean>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setNote(
      _course: string,
      _nameStudent: string,
      _note: number | string | BN
    ): NonPayableTransactionObject<void>;

    setTeacher(
      _class: string,
      _course: string,
      _addr: string
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    studentAdded(cb?: Callback<studentAdded>): EventEmitter;
    studentAdded(
      options?: EventOptions,
      cb?: Callback<studentAdded>
    ): EventEmitter;

    teacherAdded(cb?: Callback<teacherAdded>): EventEmitter;
    teacherAdded(
      options?: EventOptions,
      cb?: Callback<teacherAdded>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "studentAdded", cb: Callback<studentAdded>): void;
  once(
    event: "studentAdded",
    options: EventOptions,
    cb: Callback<studentAdded>
  ): void;

  once(event: "teacherAdded", cb: Callback<teacherAdded>): void;
  once(
    event: "teacherAdded",
    options: EventOptions,
    cb: Callback<teacherAdded>
  ): void;
}
