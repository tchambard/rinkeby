/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Blacklisted = ContractEventLog<{
  _address: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Whitelisted = ContractEventLog<{
  _address: string;
  0: string;
}>;

export interface ERC20Token extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ERC20Token;
  clone(): ERC20Token;
  methods: {
    blacklist(_address: string): NonPayableTransactionObject<void>;

    isBlacklisted(_address: string): NonPayableTransactionObject<boolean>;

    isWhitelisted(_address: string): NonPayableTransactionObject<boolean>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    whitelist(_address: string): NonPayableTransactionObject<void>;
  };
  events: {
    Blacklisted(cb?: Callback<Blacklisted>): EventEmitter;
    Blacklisted(
      options?: EventOptions,
      cb?: Callback<Blacklisted>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Whitelisted(cb?: Callback<Whitelisted>): EventEmitter;
    Whitelisted(
      options?: EventOptions,
      cb?: Callback<Whitelisted>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Blacklisted", cb: Callback<Blacklisted>): void;
  once(
    event: "Blacklisted",
    options: EventOptions,
    cb: Callback<Blacklisted>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Whitelisted", cb: Callback<Whitelisted>): void;
  once(
    event: "Whitelisted",
    options: EventOptions,
    cb: Callback<Whitelisted>
  ): void;
}
