/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type GameRestarted = ContractEventLog<{
  _admin: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type PlayerWon = ContractEventLog<{
  _player: string;
  _word: string;
  0: string;
  1: string;
}>;

export interface GuessAndWin extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): GuessAndWin;
  clone(): GuessAndWin;
  methods: {
    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    newPlayer(): NonPayableTransactionObject<void>;

    defineWordAndIndice(
      _word: string,
      _indice: string
    ): NonPayableTransactionObject<void>;

    getIndice(): NonPayableTransactionObject<string>;

    proposeWord(_word: string): NonPayableTransactionObject<boolean>;

    newGame(_newAdmin: string): NonPayableTransactionObject<void>;
  };
  events: {
    GameRestarted(cb?: Callback<GameRestarted>): EventEmitter;
    GameRestarted(
      options?: EventOptions,
      cb?: Callback<GameRestarted>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    PlayerWon(cb?: Callback<PlayerWon>): EventEmitter;
    PlayerWon(options?: EventOptions, cb?: Callback<PlayerWon>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "GameRestarted", cb: Callback<GameRestarted>): void;
  once(
    event: "GameRestarted",
    options: EventOptions,
    cb: Callback<GameRestarted>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "PlayerWon", cb: Callback<PlayerWon>): void;
  once(
    event: "PlayerWon",
    options: EventOptions,
    cb: Callback<PlayerWon>
  ): void;
}
