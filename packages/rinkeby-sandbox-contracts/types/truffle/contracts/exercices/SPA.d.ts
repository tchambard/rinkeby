/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface SPAContract extends Truffle.Contract<SPAInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<SPAInstance>;
}

export interface AnimalAdopted {
  name: "AnimalAdopted";
  args: {
    id: BN;
    0: BN;
  };
}

export interface AnimalDied {
  name: "AnimalDied";
  args: {
    id: BN;
    0: BN;
  };
}

export interface NewAnimalAvailable {
  name: "NewAnimalAvailable";
  args: {
    id: BN;
    race: string;
    taille: BN;
    age: BN;
    0: BN;
    1: string;
    2: BN;
    3: BN;
  };
}

type AllEvents = AnimalAdopted | AnimalDied | NewAnimalAvailable;

export interface SPAInstance extends Truffle.ContractInstance {
  addAnimal: {
    (
      _race: string,
      _taille: number | BN | string,
      _age: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _race: string,
      _taille: number | BN | string,
      _age: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _race: string,
      _taille: number | BN | string,
      _age: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _race: string,
      _taille: number | BN | string,
      _age: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  adoptByCriteria: {
    (
      _race: string,
      _taille: number | BN | string,
      _age: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _race: string,
      _taille: number | BN | string,
      _age: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _race: string,
      _taille: number | BN | string,
      _age: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _race: string,
      _taille: number | BN | string,
      _age: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  adoptById: {
    (id: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  adoptedBy(
    master: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ race: string; taille: BN; age: BN; isAdopted: boolean }>;

  animals(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: BN; 2: BN; 3: boolean }>;

  getAnimal(
    id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ race: string; taille: BN; age: BN; isAdopted: boolean }>;

  masters(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  removeAnimal: {
    (
      animalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      animalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      animalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      animalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAnimal: {
    (
      id: number | BN | string,
      _race: string,
      _taille: number | BN | string,
      _age: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      id: number | BN | string,
      _race: string,
      _taille: number | BN | string,
      _age: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: number | BN | string,
      _race: string,
      _taille: number | BN | string,
      _age: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: number | BN | string,
      _race: string,
      _taille: number | BN | string,
      _age: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    addAnimal: {
      (
        _race: string,
        _taille: number | BN | string,
        _age: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _race: string,
        _taille: number | BN | string,
        _age: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _race: string,
        _taille: number | BN | string,
        _age: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _race: string,
        _taille: number | BN | string,
        _age: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    adoptByCriteria: {
      (
        _race: string,
        _taille: number | BN | string,
        _age: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _race: string,
        _taille: number | BN | string,
        _age: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _race: string,
        _taille: number | BN | string,
        _age: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _race: string,
        _taille: number | BN | string,
        _age: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    adoptById: {
      (
        id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    adoptedBy(
      master: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ race: string; taille: BN; age: BN; isAdopted: boolean }>;

    animals(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: BN; 2: BN; 3: boolean }>;

    getAnimal(
      id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ race: string; taille: BN; age: BN; isAdopted: boolean }>;

    masters(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    removeAnimal: {
      (
        animalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        animalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        animalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        animalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setAnimal: {
      (
        id: number | BN | string,
        _race: string,
        _taille: number | BN | string,
        _age: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        id: number | BN | string,
        _race: string,
        _taille: number | BN | string,
        _age: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        id: number | BN | string,
        _race: string,
        _taille: number | BN | string,
        _age: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        id: number | BN | string,
        _race: string,
        _taille: number | BN | string,
        _age: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
